<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>My blog</title><link>https://isuquo.github.io/</link><description>Recent content on My blog</description><generator>Hugo -- 0.147.8</generator><language>en-us</language><lastBuildDate>Sun, 08 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://isuquo.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows Forensics</title><link>https://isuquo.github.io/posts/windows-forensics/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/windows-forensics/</guid><description>&lt;p>This challenge involves analyzing a scenario of lateral movement and persistence following initial access.&lt;/p>
&lt;p>We use various DFIR tools to examine the investigation files.&lt;/p>
&lt;p>The challenge is marked as HARD by LetsDefend: &lt;a href="https://app.letsdefend.io/challenge/windows-forensics">https://app.letsdefend.io/challenge/windows-forensics&lt;/a>&lt;/p>
&lt;h1 id="windows-forensics">Windows Forensics&lt;/h1>
&lt;p>&lt;strong>1. Initial Access was made through a Malicious Document delivered through email. What was the full path where the document was downloaded?&lt;/strong>&lt;/p>
&lt;p>Trouble exporting files as is.&lt;/p>
&lt;p>Needed to mount the drive to a logical disk to view the [root] directory.&lt;/p></description></item><item><title>Windows Theme Spoofing</title><link>https://isuquo.github.io/posts/windows-theme-spoofing/</link><pubDate>Sat, 07 Jun 2025 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/windows-theme-spoofing/</guid><description>&lt;p>This challenge is marked as HARD by LetsDefend: &lt;a href="https://app.letsdefend.io/challenge/windows-theme-spoofing">https://app.letsdefend.io/challenge/windows-theme-spoofing&lt;/a>&lt;/p>
&lt;p>We use a combination of Wireshark and MFT Viewer to analyze the investigation files using DFIR methods.&lt;/p>
&lt;h1 id="windows-theme-spoofing">Windows Theme Spoofing&lt;/h1>
&lt;p>For more information on the vulnerability we&amp;rsquo;ll be inspecting: &lt;a href="https://www.rbtsec.com/blog/cve-2024-21320-windows-themes-spoofing-vulnerability-walkthrough/">https://www.rbtsec.com/blog/cve-2024-21320-windows-themes-spoofing-vulnerability-walkthrough/&lt;/a>&lt;/p>
&lt;p>This CVE-2024-21320 exploit involves a malicious Windows theme that triggers NTLM hash disclosure without user interaction. The analysis is conducted using the following steps.&lt;/p>
&lt;p>&lt;strong>1. Can you identify the Attacker&amp;rsquo;s file share path utilized to exploit the CVE?&lt;/strong>&lt;/p></description></item><item><title>Forensics</title><link>https://isuquo.github.io/posts/forensics/</link><pubDate>Fri, 06 Jun 2025 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/forensics/</guid><description>&lt;h1 id="forensics">Forensics&lt;/h1>
&lt;p>The following challenge is marked as HARD by TryHackMe: &lt;a href="https://tryhackme.com/room/forensics">https://tryhackme.com/room/forensics&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>remnux@remnux:~/Downloads$ vol.py -f victim.raw imageinfo
Volatility Foundation Volatility Framework 2.6.1
INFO : volatility.debug : Determining profile based on KDBG search...
Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418
AS Layer1 : WindowsAMD64PagedMemory (Kernel AS)
AS Layer2 : FileAddressSpace (/home/remnux/Downloads/victim.raw)
PAE type : No PAE
DTB : 0x187000L
KDBG : 0xf800028420a0L
Number of Processors : 1
Image Type (Service Pack) : 1
KPCR for CPU 0 : 0xfffff80002843d00L
KUSER_SHARED_DATA : 0xfffff78000000000L
Image date and time : 2019-05-02 18:11:45 UTC+0000
Image local date and time : 2019-05-02 11:11:45 -0700
&lt;/code>&lt;/pre>&lt;p>&lt;strong>1. What is the Operating System of this Dump file? (OS name)&lt;/strong>&lt;/p></description></item><item><title>SBTVIP CTF Challenges</title><link>https://isuquo.github.io/posts/sbtvip/</link><pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/sbtvip/</guid><description>&lt;p>Over the past four weeks, SecurityBlue.Team have released their very first CTF event. During the first two weeks, the CTF was only available to VIP members. The last two weeks were open to the public. As it stands, there are currently over 300 participants. During the VIP tenure, there were ~50 participants, including me.&lt;/p>
&lt;p>As the CTF is still open and very much active, I will not be revealing the flags. As such, I will showcase the methods I used to retrieve these flags for my favourite challenges. If you wish to have a go, visit &lt;a href="https://sbtvip.ctfd.io/challenges">https://sbtvip.ctfd.io/challenges&lt;/a>, make an account and get going!&lt;/p></description></item><item><title>Operation Chimera 2019 - Digital Forensics Challenge</title><link>https://isuquo.github.io/posts/chimera/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/chimera/</guid><description>&lt;p>Operation Chimera was a course created by Security Blue Team. It ran from the 1st of October to the 31st of November. Various modules were released during this time to give the user an insight into the world of security and the challenges that may lie ahead.&lt;/p>
&lt;p>Security Blue Team can be found here: &lt;a href="https://securityblue.team/">https://securityblue.team/&lt;/a>&lt;/p>
&lt;p>One of my favourite modules was the Digital Forensics module, which was definitely challenging, and provides a story for the user to follow. The challenge contains four flags that the user must find, in the format of x/4. After finding all of the flags, you must answer the given questions to receive a mark.&lt;/p></description></item><item><title>picoCTF Vault Door Challenges</title><link>https://isuquo.github.io/posts/pico-2020-1/</link><pubDate>Sat, 11 Jan 2020 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/pico-2020-1/</guid><description>&lt;p>Today we&amp;rsquo;ll be looking at a series of challenges created during the picoCTF event. I was unfortunately not able to complete these during the event as the event had ended before I got a chance to see what it&amp;rsquo;s all about.&lt;/p>
&lt;p>We will be solving the Vault Door series of challenges, with each of increasing difficulty. They are all .java files and the goal is to open up the source code and retrieve the flag.&lt;/p></description></item><item><title>NoREpls Part 0-3</title><link>https://isuquo.github.io/posts/norepls-0-3/</link><pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/norepls-0-3/</guid><description>&lt;p>Today we&amp;rsquo;ll be looking at a few crackmes called NoREpls made by DTM. The challenges can be found here: &lt;a href="https://0x00sec.org/t/challenge-collection-reverse-engineering-and-crackme/3027">https://0x00sec.org/t/challenge-collection-reverse-engineering-and-crackme/3027&lt;/a>&lt;/p>
&lt;h1 id="part-0">Part 0:&lt;/h1>
&lt;p>When executing the program, we are greeted with a simple window with one button. The button does not do anything interesting. The program has two options in the menu bar, file and about. We can use the about menu to either register the program or show a MessageBox with a description of the program. The file menu has only one option, exit.&lt;/p></description></item><item><title>Crackme challenge #4 &amp; #5</title><link>https://isuquo.github.io/posts/crackme-4-5/</link><pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/crackme-4-5/</guid><description>&lt;p>Today we&amp;rsquo;ll be looking at two ringzer0 Reverse Engineering challenges called &amp;ldquo;Windows x86 reversing is cool&amp;rdquo; and &amp;ldquo;Windows API for the win&amp;rdquo;. Both challenges are worth 3 and 4 points respectively.&lt;/p>
&lt;p>The goal of the challenges is to find the flag hidden within.&lt;/p>
&lt;h1 id="windows-x86-reversing-is-cool">Windows x86 reversing is cool&lt;/h1>
&lt;p>When executing the application, it asks for a key. Typing in &amp;ldquo;1234&amp;rdquo; yields a &amp;ldquo;Wrong Key!&amp;rdquo; string:&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://isuquo.github.io/posts/crackme-4-5/images/1.PNG">&lt;/p>
&lt;h2 id="static-analysis">Static analysis:&lt;/h2>
&lt;p>Analysing the exe in IDA, we can see the key function is found at address 0x40139B. We can also see our &amp;ldquo;Wrong Key!&amp;rdquo; string in here.&lt;/p></description></item><item><title>Crackme challenge #3</title><link>https://isuquo.github.io/posts/crackme-3/</link><pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/crackme-3/</guid><description>&lt;p>Today we&amp;rsquo;ll be looking at a ringzer0 challenge called &amp;ldquo;Crack Me 1&amp;rdquo; made by Mr.Un1k0d3r and can be found here: &lt;a href="https://ringzer0ctf.com/challenges/9">https://ringzer0ctf.com/challenges/9&lt;/a> - the challenge is worth 3 points.&lt;/p>
&lt;p>The goal of the challenge is to find the flag hidden within.&lt;/p>
&lt;p>When first executing the executable, we are presented with the following MessageBox:&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://isuquo.github.io/posts/crackme-3/images/1.PNG">&lt;/p>
&lt;p>After pressing OK, the program exits.&lt;/p>
&lt;h1 id="static-analysis">Static analysis:&lt;/h1>
&lt;p>I noticed in PEView that there is a custom resource section, suggesting that their might be hidden data within:&lt;/p></description></item><item><title>Flare-on 2019 challenge #2</title><link>https://isuquo.github.io/posts/flareon-2019-2/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/flareon-2019-2/</guid><description>&lt;p>Welcome to the second Flare-on 2019 write up. For this one, we&amp;rsquo;ll be looking at an application called &amp;ldquo;Overlong&amp;rdquo;, which is also the name of the challenge.&lt;/p>
&lt;p>The readme that comes with the challenge reads:&lt;/p>
&lt;blockquote>
&lt;p>The secret of this next challenge is cleverly hidden. However, with the right approach, finding the solution will not take an &lt;!-- raw HTML omitted -->overlong&lt;!-- raw HTML omitted --> amount of time.&lt;/p>&lt;/blockquote>
&lt;h1 id="dynamic-analysis">Dynamic Analysis:&lt;/h1>
&lt;p>There isn&amp;rsquo;t much to the application. When executing a MessageBox shows the following:&lt;/p></description></item><item><title>Flare-on 2019 challenge #3</title><link>https://isuquo.github.io/posts/flareon-2019-1/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/flareon-2019-1/</guid><description>&lt;p>Welcome to my first Flare-on 2019 challenge write up. This challenge is called Memecat Battlestation.&lt;/p>
&lt;p>The challenge comes with a readme that reads:&lt;/p>
&lt;blockquote>
&lt;p>Welcome to the Sixth Flare-On Challenge!
This is a simple game. Reverse engineer it to figure out what &amp;ldquo;weapon codes&amp;rdquo; you need to enter to defeat each of the two enemies and the victory screen will reveal the flag. Enter the flag here on this site to score and move on to the next level.&lt;/p></description></item><item><title>Flare-on 2019 challenge #3</title><link>https://isuquo.github.io/posts/flareon-2019-3/</link><pubDate>Sun, 06 Oct 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/flareon-2019-3/</guid><description>&lt;p>Welcome to the third Flare-on 2019 challenge write up. This time we&amp;rsquo;ll be looking at an application called FlareBear, which is also the name of the challenge.&lt;/p>
&lt;p>The readme that is included reads:&lt;/p>
&lt;blockquote>
&lt;p>We at Flare have created our own Tamagotchi pet, the flarebear. He is very fussy. Keep him alive and happy and he will give you the flag.
This application is an .apk file, so we will need to download an Andorid emulator to run the application.&lt;/p></description></item><item><title>Crackme challenge #2</title><link>https://isuquo.github.io/posts/crackme-2/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/crackme-2/</guid><description>&lt;p>Today we&amp;rsquo;ll be reversing a crackme by Saduz called &amp;ldquo;Visual c++ crackme&amp;rdquo;, which can be found here: &lt;a href="https://crackmes.one/crackme/5c1d6f5f33c5d41e58e005f5">https://crackmes.one/crackme/5c1d6f5f33c5d41e58e005f5&lt;/a>&lt;/p>
&lt;h1 id="dynamic-analysis">Dynamic analysis:&lt;/h1>
&lt;p>When executing the crackme, you are presented with a form with two textboxes asking for a Name and Reg num. When clicking the About button, a MessageBox is spawned.&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://isuquo.github.io/posts/crackme-2/images/1.PNG">&lt;/p>
&lt;p>We try &amp;ldquo;test&amp;rdquo; as our Name and &amp;ldquo;123&amp;rdquo; as our Reg num, but a MessageBox is spawned asking us to try again.&lt;/p></description></item><item><title>Crackme challenge #1</title><link>https://isuquo.github.io/posts/crackme-1/</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><guid>https://isuquo.github.io/posts/crackme-1/</guid><description>&lt;h1 id="7erom---1st-one-challenge">7eRoM - 1st one challenge&lt;/h1>
&lt;p>Welcome to my first blog post. Today, we&amp;rsquo;ll be attempting to crack 7eRoM&amp;rsquo;s Crackme called &amp;ldquo;1st one challenge&amp;rdquo;.&lt;/p>
&lt;p>When executing the app, you are prompted for a password:&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://isuquo.github.io/posts/crackme-1/images/1.PNG">&lt;/p>
&lt;p>The app exits afterwards.&lt;/p>
&lt;p>If we debug the app in Ollydbg, we get a slightly different output after entering in the same password:&lt;/p>
&lt;p>&lt;img loading="lazy" src="https://isuquo.github.io/posts/crackme-1/images/2.PNG">&lt;/p>
&lt;h2 id="finding-the-main-function">Finding the main function&lt;/h2>
&lt;p>When viewing this app in Ollydbg, we are greeted with the C runtime initialization (CRT) system. According to &lt;a href="https://www.embecosm.com/appnotes/ean9/html/ch05s02.html">https://www.embecosm.com/appnotes/ean9/html/ch05s02.html&lt;/a>, a few initialization steps need to be taken before calling the main function.&lt;/p></description></item></channel></rss>